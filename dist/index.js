import{fetchEventSource as I} from"@microsoft/fetch-event-source";import{parse as J} from"devalue";function K(q,z,F={}){let x,{signal:j}=F;if(!j)x=new AbortController,F.signal=j;return{promise:I(q,{...F,onmessage({event:B,data:D}){const A=z[B];if(A)A(J(D))}}),abort:()=>x?.abort()}}import{stringify as N} from"devalue";var O=new TextEncoder,P=(q,z)=>()=>{let F={};const x=new ReadableStream({start(j){for(let[k,B]of Object.entries(z)){const D=(...A)=>{let G;if(B===!0||(G=B(...A))===!0)H(k,A,j);else if(Array.isArray(G))H(k,G,j)};F[k]=D,q.on(k,D)}},cancel(){for(let[j,k]of Object.entries(F))delete F[j],q.off(j,k);F={}}});return new Response(x,{headers:{"content-type":"text/event-stream"}})},H=(q,z,F)=>{const x=[`event:${q}`,`data:${N(z)}`];F.enqueue(O.encode(`${x.join("\n")}\n\n`))};export{P as makeSseEmitter,K as listenToEvents};
