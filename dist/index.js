import{fetchEventSource as J} from"@microsoft/fetch-event-source";import{parse as K} from"devalue";function N(x,F,y={}){let k,{signal:w}=y;if(!w)k=new AbortController,y.signal=w;return{promise:J(x,{...y,onmessage({event:q,data:z}){const b=F[q];if(b)b(K(z))}}),abort:()=>k?.abort()}}import{stringify as O} from"devalue";var P=(x)=>new H(x);class H{#x;constructor(x){this.#x=x}withContext(){return this}switchEvents(x){return new I(this.#x,x)}}class I{#x;#y;constructor(x,F){this.#x=x,this.#y=F}streamEvents(...x){const F=this;let y={};const k=new ReadableStream({start(w){for(let[A,q]of Object.entries(F.#y)){const z=(...b)=>{let B;if(q===!0||(B=q(...b,...x))===!0)G(A,b,w);else if(Array.isArray(B))G(A,B,w)};y[A]=z,F.#x.on(A,z)}},cancel(){for(let[w,A]of Object.entries(y))delete y[w],F.#x.off(w,A);y={}}});return new Response(k,{headers:{"content-type":"text/event-stream"}})}}var Q=new TextEncoder,G=(x,F,y)=>{y.enqueue(Q.encode(`event:${x}\ndata:${O(F)}\n\n`))};export{N as listenToEvents,P as defineMapFor};
