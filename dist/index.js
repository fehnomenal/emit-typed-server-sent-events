import{fetchEventSource as J} from"@microsoft/fetch-event-source";import{parse as K} from"devalue";function N(w,k,b={}){let z={};if(!b.signal){const F=new AbortController;b.signal=F.signal,z.abort=()=>F.abort()}const q=J(w,{...b,onmessage({event:F,data:A}){const x=k[F];if(x)x(...K(A))}});return Object.assign(z,{promise:q})}import{stringify as O} from"devalue";var P=(w)=>new H(w);class H{#w;constructor(w){this.#w=w}withContext(){return this}switchEvents(w){return new I(this.#w,w)}}class I{#w;#F;constructor(w,k){this.#w=w,this.#F=k}streamEvents(...[w]){const k=this;let b={};const z=new ReadableStream({start(q){for(let[F,A]of Object.entries(k.#F)){const x=(...C)=>{let B;if(A===!0||(B=A(...C,w))===!0)G(F,C,q);else if(Array.isArray(B))G(F,B,q)};b[F]=x,k.#w.on(F,x)}},cancel(){for(let[q,F]of Object.entries(b))delete b[q],k.#w.off(q,F);b={}}});return new Response(z,{headers:{"content-type":"text/event-stream"}})}}var Q=new TextEncoder,G=(w,k,b)=>{b.enqueue(Q.encode(`event:${w}\ndata:${O(k)}\n\n`))};export{N as listenToEvents,P as defineMapFor};
